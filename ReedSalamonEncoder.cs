using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace QRCodeControlProject
{
    internal static class ReedSalamonEncoder
    {
        // Generátor polinomok előre számolva kicsi QR verziókra (Medium szinthez!)
        // Nagyobb QR-hoz bővíteni kellene!
        private static readonly Dictionary<int, byte[]> GeneratorPolynomials = new Dictionary<int, byte[]>()
        {
            { 10, new byte[] { 0xED, 0xB8, 0xDB, 0x8F, 0xB6, 0x3F, 0xD6, 0x6B, 0x7D, 0xC5 } },
            { 16, new byte[] { 0xE5, 0x9D, 0x57, 0x6B, 0x88, 0x5E, 0x28, 0x17, 0x65, 0xC0, 0xDE, 0x76, 0x6F, 0x2C, 0xA6, 0xB4 } },
            { 26, new byte[] { 0x9A, 0xBF, 0xB3, 0xA9, 0x79, 0xA2, 0x91, 0x0F, 0x45, 0x5E, 0xE1, 0x2D, 0xDC, 0x62, 0x2A, 0x0D, 0x5D, 0xD5, 0xD1, 0xB2, 0x1A, 0x23, 0x8D, 0x6D, 0xDE, 0x46 } },
            { 36, new byte[] { 0x79, 0x4F, 0x3D, 0xD1, 0x83, 0x96, 0x3E, 0x7E, 0xA7, 0xF4, 0x87, 0x91, 0x2E, 0x2B, 0x8A, 0xB3, 0xB2, 0xE3, 0x05, 0x32, 0xDE, 0x65, 0xB2, 0xC5, 0xC7, 0xD7, 0x6F, 0xC6, 0x73, 0x6F, 0xF2, 0x96, 0xE6, 0x1E, 0xC7 } },
            { 48, new byte[] { 0x7D, 0x31, 0x90, 0x5F, 0x49, 0x43, 0xD6, 0x5F, 0xD7, 0x96, 0x36, 0xAC, 0x97, 0x92, 0xD2, 0x75, 0xBC, 0xA6, 0x2C, 0x36, 0xEE, 0x70, 0x9E, 0xFD, 0xE6, 0x53, 0x1D, 0xDE, 0xFA, 0x8A, 0x69, 0xE2, 0x43, 0x3E, 0xB1, 0xBC, 0x0B, 0xA5, 0x83, 0x0B, 0x68, 0x22, 0xDC, 0xC2, 0x2A, 0x59, 0xC2 } },
            { 64, new byte[] { 0x64, 0xC1, 0xF7, 0x47, 0xA8, 0x3A, 0xE0, 0x9F, 0x7E, 0xA7, 0x4B, 0xC6, 0xD5, 0x5F, 0x42, 0xC1, 0x3C, 0x95, 0x27, 0x1D, 0x5D, 0x65, 0x4B, 0x8B, 0x3E, 0x41, 0xF2, 0x5D, 0x12, 0x3B, 0x08, 0x2A, 0x73, 0x2D, 0x0C, 0x25, 0xAC, 0x46, 0x27, 0xF1, 0x24, 0x3B, 0x53, 0xAE, 0xF1, 0x61, 0x47, 0x16, 0x19, 0x5D, 0x96, 0x7E, 0xC4, 0x20, 0xC3, 0xD6, 0x93, 0xB6, 0x8C, 0xB0, 0xD5, 0x1A, 0xC3, 0x5D } },
        };

        public static List<byte> Encode(List<byte> data, int errorCorrectionBytes)
        {
            if (!GeneratorPolynomials.ContainsKey(errorCorrectionBytes))
                throw new NotSupportedException("Nincs generátor polinom ehhez a hibajavító mérethez.");

            byte[] generator = GeneratorPolynomials[errorCorrectionBytes];

            List<byte> message = new List<byte>(data);
            message.AddRange(Enumerable.Repeat((byte)0, errorCorrectionBytes)); // Nullák hozzáadása

            for (int i = 0; i < data.Count; i++)
            {
                byte coefficient = message[i];
                if (coefficient != 0)
                {
                    for (int j = 0; j < generator.Length; j++)
                    {
                        message[i + j] ^= GaloisMultiply(generator[j], coefficient);
                    }
                }
            }

            // Az utolsó hibajavító bájtok kellenek
            return message.GetRange(data.Count, errorCorrectionBytes);
        }

        // Galois mező szorzás QR-kód szabvány szerint (GF(256))
        private static byte GaloisMultiply(byte a, byte b)
        {
            byte p = 0;
            for (int counter = 0; counter < 8; counter++)
            {
                if ((b & 1) != 0)
                    p ^= a;
                bool hi_bit_set = (a & 0x80) != 0;
                a <<= 1;
                if (hi_bit_set)
                    a ^= 0x1D; // QR-kód Galois generátor polinomja
                b >>= 1;
            }
            return p;
        }
    }
}
